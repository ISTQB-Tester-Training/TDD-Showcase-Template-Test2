// In Step 2 wird der Code geschrieben. Das entpricht dem Schritt gr체n im Red-Green-Refactoring-Cycle.

// Das ist wichtig:
// Es wird gerade so viel Code geschrieben, dass der Test erfolgreich ist. Deshalb wird der Return-Wert "1.0"
// hartkodiert in die Methode geschrieben.
// Es werden auch wieder Designentscheidungen getroffen, n채mlich, dass es eine Methode setTimeValues geben soll
// und dass die Methode getTimeDifference mit und ohne Parameter aufgerufen werden kann.
// Nachdem die Klasse geschrieben ist und in die Testklasse importiert wurde, verschwinden alle roten Markierungen im Editor.

// Schritt 2.1 Code in Datei TimePair.java kopieren
// Schritt 2.2 In Datei TimePairTest.java die Klassen mit dem produktiven Code bekannt machen.
//             import tddshowcasepackage.*; in Datei TimePairTest.java oben einf체gen
// Schritt 2.3 Test code ausf체hren (-> Erfolgreich)
// Schritt 2.4 Code committen (Commit-Meldung "Comit nach Step 2") und ins GitHub-Repository pushen

// In Datei TimePair.java

package tddshowcasepackage;

public class TimePair {

    private String startTime = null;
    private String endTime = null;

    public TimePair() {};

    public void setTimeValues (String strStartTime, String strEndTime) {
        startTime = strStartTime;
        endTime = strEndTime;
    }

    public double getTimeDifference(String strStartTime, String strEndTime) {
        setTimeValues(strStartTime, strEndTime);
        return getTimeDifference();
    }

    public double getTimeDifference() {
        return 1.0;
    }
}

