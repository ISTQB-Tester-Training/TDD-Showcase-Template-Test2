// Im Step 3 wird der zweite Test geschrieben. Das entpricht dem Schritt rot im Red-Green-Refactoring-Cycle.
// Es wird die Zeitdifferenz für ein zweites Zeitpaar berechnet. Die Zeitdifferenz wird einfach als 0 Stunde angenommen.
// Das ist praktisch ein Grenzwerttest.

// Das ist wichtig:
// Die Funktionalität an sich existiert bereits, deshalb zeigt der Editor keine roten Unterringelungen an.
// Der Testlauf schlägt aber trotzdem fehlt, weil im produktiven Code der Rückgabewert 1 fest eingetragen ist.
// Die assertEquals-Funktion zeigt dies dann auch so an.

// Schritt 3.1 Code in die Datei TimePairTest.java kopieren.
// Schritt 1.2 Test code ausführen (-> führt zu Fehler)
// Schritt 1.3 Code committen (Commit-Meldung "Comit nach Step 1") und ins GitHub-Repository pushen

// In Datei TimePairTest.java

package tddshowcasetestpackage;

import tddshowcasepackage.*;
import org.junit.Test;
import static org.junit.Assert.*;

public class TimePairTest {

    TimePair aTimePair = new TimePair();

    @Test
    public void timeDifferenceTest_1h () {
        aTimePair.setTimeValues("10:00", "11:00");
        assertEquals(1.0, aTimePair.getTimeDifference(), 0.0);
    }

    @Test
    public void timeDifferenceTest_0h () {
       aTimePair.setTimeValues("10:00", "10:00");
       assertEquals(0.0, aTimePair.getTimeDifference(), 0.0);
    }
}