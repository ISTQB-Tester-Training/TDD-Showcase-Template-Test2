// In Step 4 wird der Code angepasst, damit der neue Test aus Schritt 3 erfolgreich wird.
// Das entpricht dem Schritt gr체n im Red-Green-Refactoring-Cycle.

// Das ist wichtig:
// Es wird die Funktionalit채t aus der java.time-Bibliothek verwendet, um die Differenz zu berechnen.
// Dadurch reicht es aus, nur eine Zeil zu erg채nzen. Die Bibnliothek muss mit entsprechenden Statements importiert werden.

// Schritt 4.1 Code in Datei TimePair.java kopieren
// Schritt 4.2 Test code ausf체hren (-> Erfolgreich)
// Schritt 4.3 Code committen (Commit-Meldung "Comit nach Step 4") und ins GitHub-Repository pushen

// In Datei TimePair.java

package tddshowcasepackage;

import java.time.*;
import java.time.temporal.ChronoUnit;

public class TimePair {

    private String startTime = null;
    private String endTime = null;

    public TimePair() {}

    public void setTimeValues (String strStartTime, String strEndTime) {
        startTime = strStartTime;
        endTime = strEndTime;
    }

    public double getTimeDifference(String strStartTime, String strEndTime) {
        setTimeValues(strStartTime, strEndTime);
        return getTimeDifference();
    }

    public double getTimeDifference() {
        return LocalTime.parse(startTime).until(LocalTime.parse(endTime), ChronoUnit.MINUTES)/60.0;
    }
}